{"version":3,"sources":["app/Data/Todos.ts","app/Layouts/TodoFilter.tsx","app/Layouts/TodoForm.tsx","app/Components/Todo.tsx","app/Layouts/Todos.tsx","app/Layouts/Wrapper.tsx","app/index.tsx","app/Hooks/useTodoFilterByMode.ts","reportWebVitals.ts","index.tsx"],"names":["ExampleTodos","id","title","checked","TodoFilter","mode","setMode","onClick","TodoForm","todos","setTodos","titleInputRef","React","onSubmit","event","preventDefault","current","value","Math","random","ref","name","placeholder","required","type","Todo","onChange","onDelete","Todos","list","checkTodo","useCallback","map","todo","deleteTodo","filter","Wrapper","props","children","App","useState","filterdTodo","useMemo","useTodoFilterByMode","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c682c82c.chunk.js","sourcesContent":["import { ITodoList } from 'app/Types/Todo'\nconst ExampleTodos: ITodoList = [\n    {\n        id: 1,\n        title: 'First example',\n        checked: false,\n    },\n    {\n        id: 2,\n        title: 'Second example',\n        checked: true,\n    },\n    {\n        id: 3,\n        title: 'Third example',\n        checked: false,\n    },\n]\n\nexport default ExampleTodos\n","import { ITodoFilter } from 'app/Types/Filters'\n\nexport interface ITodoFilterProps {\n    mode: ITodoFilter\n    setMode: (mode: ITodoFilter) => void\n}\n\nexport default function TodoFilter({ mode, setMode }: ITodoFilterProps) {\n    return (\n        <div>\n            <button onClick={() => setMode('all')}>\n                all\n                {mode === 'all' && '(active)'}\n            </button>\n            <button onClick={() => setMode('done')}>\n                done\n                {mode === 'done' && '(active)'}\n            </button>\n            <button onClick={() => setMode('todo')}>\n                todo\n                {mode === 'todo' && '(active)'}\n            </button>\n        </div>\n    )\n}\n","import { ITodoList } from 'app/Types/Todo'\nimport * as React from 'react'\n\nexport interface ITodoFormProps {\n    todos: ITodoList\n    setTodos: (todos: ITodoList) => void\n}\n\nexport default function TodoForm({ todos, setTodos }: ITodoFormProps) {\n    const titleInputRef = React.useRef<HTMLInputElement | null>(null)\n    const submit = (event: React.FormEvent<HTMLFormElement>) => {\n        event.preventDefault()\n        if (!titleInputRef.current) {\n            return\n        }\n        const title = titleInputRef.current.value\n        setTodos([\n            ...todos,\n            {\n                id: Math.random() * 10000,\n                title,\n                checked: false,\n            },\n        ])\n        // clear the input\n        titleInputRef.current.value = ''\n    }\n    return (\n        <form onSubmit={submit}>\n            <input\n                ref={titleInputRef}\n                name=\"title\"\n                placeholder=\"Title\"\n                required\n            />\n            <button type=\"submit\">Add todo</button>\n        </form>\n    )\n}\n","import { ITodo } from 'app/Types/Todo'\n\nexport interface ITodoProps extends ITodo {\n    onChange?: (id: number, checked: boolean) => void\n    onDelete?: (id: number) => void\n}\n\nexport default function Todo({\n    id,\n    title,\n    checked,\n    onChange,\n    onDelete,\n}: ITodoProps) {\n    return (\n        <div>\n            <input\n                type=\"checkbox\"\n                checked={checked}\n                onClick={() => onChange && onChange(id, !checked)}\n            />\n            <span>{title}</span>\n            <button onClick={() => onDelete && onDelete(id)}>x</button>\n            <br />\n            <br />\n        </div>\n    )\n}\n","import { ITodoList } from 'app/Types/Todo'\nimport Todo from 'app/Components/Todo'\nimport { useCallback } from 'react'\nexport interface ITodosProps {\n    todos: ITodoList\n    list: ITodoList\n    setTodos: (todos: ITodoList) => void\n}\n\nexport default function Todos({ todos, list, setTodos }: ITodosProps) {\n    const checkTodo = useCallback(\n        (id: number, checked: boolean) =>\n            setTodos(\n                todos.map((todo) => {\n                    if (todo.id === id) {\n                        return {\n                            ...todo,\n                            checked,\n                        }\n                    }\n                    return todo\n                })\n            ),\n        [todos, setTodos]\n    )\n\n    const deleteTodo = useCallback(\n        (id: number) => setTodos(todos.filter((todo) => todo.id !== id)),\n        [todos, setTodos]\n    )\n\n    return (\n        <div>\n            {list.map((todo) => (\n                <Todo\n                    key={todo.id}\n                    onChange={checkTodo}\n                    onDelete={deleteTodo}\n                    {...todo}\n                />\n            ))}\n        </div>\n    )\n}\n","import * as React from 'react'\n\nexport interface IWrapperProps {\n    children: React.ReactChild[]\n}\n\nexport default function Wrapper(props: IWrapperProps) {\n    return <div>{props.children}</div>\n}\n","import { useState } from 'react'\nimport ExampleTodos from './Data/Todos'\nimport useTodoFilterByMode from './Hooks/useTodoFilterByMode'\nimport TodoFilter from './Layouts/TodoFilter'\nimport TodoForm from './Layouts/TodoForm'\nimport Todos from './Layouts/Todos'\nimport Wrapper from './Layouts/Wrapper'\nimport { ITodoFilter } from './Types/Filters'\n\nexport default function App() {\n    const [mode, setMode] = useState<ITodoFilter>('all')\n    const [todos, setTodos] = useState(ExampleTodos)\n    const filterdTodo = useTodoFilterByMode(todos, mode)\n    return (\n        <Wrapper>\n            <TodoFilter mode={mode} setMode={setMode} />\n            <Todos todos={todos} list={filterdTodo} setTodos={setTodos} />\n            <TodoForm todos={filterdTodo} setTodos={setTodos} />\n        </Wrapper>\n    )\n}\n","import { ITodoFilter } from 'app/Types/Filters'\nimport { ITodoList } from 'app/Types/Todo'\nimport { useMemo } from 'react'\n\nexport default function useTodoFilterByMode(\n    todos: ITodoList,\n    mode: ITodoFilter\n) {\n    return useMemo(() => {\n        if (mode === 'all') {\n            return todos\n        }\n        return todos.filter((todo) =>\n            mode === 'done' ? todo.checked : !todo.checked\n        )\n    }, [todos, mode])\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './app'\nimport reportWebVitals from './reportWebVitals'\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root')\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}